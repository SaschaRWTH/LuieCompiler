gate h_reg(reg) do
    for i in range(sizeof(reg)) do
        h reg[i];
    end
end

// Applies the unitary operator U_f to a register of qubits,
// where f(x) = x mod 2
gate u_f(reg, out) do
    for i in range(min(sizeof(reg), sizeof(out)) - 1) do
        cx reg[i+1], out[i+1];
    end
end

// Swaps the values of two qubits
gate swap(a, b) do
    cx a, b;
    cx b, a;
    cx a, b;
end

// Performs a discrete Fourier transform on a register of qubits
gate qft(reg) do
    for i in range(sizeof(reg)) do
        h reg[i];
        for j in range(sizeof(reg) - (i + 1)) do
            qif reg[j + (i + 1)] do
                p(1/(power(2, (j + 1)))) reg[i];
            end
        end
    end
    for j in range(sizeof(reg) / 2) do
        swap reg[j], reg[sizeof(reg) - (j + 1)];
    end
end

qubit[5] a;
qubit[5] out;

h_reg a;

u_f a, out;

qft a;